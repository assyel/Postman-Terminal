[Forwarded from Vadim_QA_Padawans_Channel]
GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.


Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON - Перейти на https://github.com и войти в свой аккаунт. Нажать кнопку New repository. На открывшейся странице ввести название репозитория как JSON и нажать кнопку Create repository. 

 5. Клонировать репозиторий JSON на локальный компьютер. - через mkdir создать папку или если есть папка t_git, через cd t_git зайти в эту папку. В своем аккаунте нажать зеленую кнопку Code, выбрать https и скопировать ссылку. В терминале набрать git clone и рядом ставить скопированную ссылку нажать enter.

 6. Внутри локального JSON создать файл “new.json”. - touch new.json или > new.json

 7. Добавить файл под гит. - git add . или git add new.json

 8. Закоммитить файл. - git commit -m “add new.json to github”

 9. Отправить файл на внешний GitHub репозиторий. - git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON. - vim new.json. Формат json это {} фигурные скобки, и если str, то в кавычках их.

 11. Отправить изменения на внешний репозиторий. - git push

 12. Создать файл preferences.json - touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON. - vim preferences.json 

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON - touch sklls.json 

 15. Отправить сразу 2 файла на внешний репозиторий. git add. и git push

 16. На веб интерфейсе создать файл bug_report.json. - Add file. Create new file.   

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать снизу зеленую кнопку Commit changes.

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. {} формате ?????????????????????

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. ө нажать снизу зеленую кнопку Commit changes.

 20. Синхронизировать внешний и локальный репозиторий JSON ө ?????????????


XML
 21. Создать внешний репозиторий c названием XML. - В своем аккаунте нажать +, в всплывающем окне со списка выбрать New repository, где repositiry name написать XML, выбрать Public, выбрать Add a READme file и внизу нажать Create repository.

 22. Клонировать репозиторий XML на локальный компьютер. - В своем аккаунте нажать зеленую кнопку Code, выбрать https и скопировать ссылку. В терминале набрать git clone и рядом ставить скопированную ссылку нажать enter.
  
 23. Внутри локального XML создать файл “new.xml”. - touch new.xml

 24. Добавить файл под гит. - git add 

 25. Закоммитить файл. - git commit -m “add new.xml”

 26. Отправить файл на внешний GitHub репозиторий. - git push

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML. - в формате <></> написать в каждой строке

 28. Отправить изменения на внешний репозиторий. ө git push

 29. Создать файл preferences.xml 

 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.

 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML

 32. Сделать коммит в одну строку. - 

 33. Отправить сразу 2 файла на внешний репозиторий.

 34. На веб интерфейсе создать файл bug_report.xml. - 

 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.

 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 38. Синхронизировать внешний и локальный репозиторий XML - git fetch или git pull










